import dotenv from "dotenv"
import express from "express"
import { Telegraf } from "telegraf"
import { Client, LocalAuth } from "whatsapp-web.js"
import qrcode from "qrcode"
import pg from "pg"

dotenv.config()

const { Pool } = pg

// ÿ•ÿπÿØÿßÿØ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === "production" ? { rejectUnauthorized: false } : false,
})

// ÿ•ÿπÿØÿßÿØ Express ŸÑŸÑŸÄ health check
const app = express()
const port = process.env.PORT || 3000

app.get("/health", (req, res) => {
  res.json({ status: "OK", timestamp: new Date().toISOString() })
})

app.get("/", (req, res) => {
  res.json({ message: "Telegram WhatsApp Bot is running" })
})

app.listen(port, () => {
  console.log(`Health server running on port ${port}`)
})

// ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ®Ÿàÿ™
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)

// ÿ•ÿπÿØÿßÿØ Ÿàÿßÿ™ÿ≥ÿßÿ®
const whatsappClient = new Client({
  authStrategy: new LocalAuth({
    dataPath: "./whatsapp-session",
  }),
  puppeteer: {
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
    headless: true,
  },
})

let qrCodeData = null
let whatsappReady = false

// ŸÖÿπÿßŸÑÿ¨ÿßÿ™ Ÿàÿßÿ™ÿ≥ÿßÿ®
whatsappClient.on("qr", async (qr) => {
  console.log("üì± QR Code received")
  try {
    qrCodeData = await qrcode.toDataURL(qr)

    // ÿ•ÿ±ÿ≥ÿßŸÑ QR ŸÑŸÑŸÖÿ¥ÿ±ŸÅ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ≠ÿØÿØ
    if (process.env.ADMIN_USER_ID && qrCodeData) {
      const buffer = Buffer.from(qrCodeData.split(",")[1], "base64")
      await bot.telegram.sendPhoto(
        process.env.ADMIN_USER_ID,
        { source: buffer },
        { caption: "üì± ÿßŸÖÿ≥ÿ≠ Ÿáÿ∞ÿß ÿßŸÑÿ±ŸÖÿ≤ ŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ•ŸÑŸâ Ÿàÿßÿ™ÿ≥ÿßÿ®" },
      )
    }
  } catch (error) {
    console.error("Error processing QR:", error)
  }
})

whatsappClient.on("ready", () => {
  whatsappReady = true
  console.log("‚úÖ WhatsApp client is ready!")

  // ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑŸÖÿ¥ÿ±ŸÅ
  if (process.env.ADMIN_USER_ID) {
    bot.telegram.sendMessage(process.env.ADMIN_USER_ID, "‚úÖ ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ•ŸÑŸâ Ÿàÿßÿ™ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠!")
  }
})

whatsappClient.on("disconnected", (reason) => {
  whatsappReady = false
  console.log("‚ö†Ô∏è WhatsApp disconnected:", reason)
})

// ŸÖÿπÿßŸÑÿ¨ÿßÿ™ ÿ™ŸÑŸäÿ¨ÿ±ÿßŸÖ
bot.start((ctx) => {
  ctx.reply(`
ü§ñ ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ÿ®Ÿàÿ™ ÿ™Ÿàÿ¨ŸäŸá ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ!

ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:
/login - ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ•ŸÑŸâ Ÿàÿßÿ™ÿ≥ÿßÿ®
/status - ÿ≠ÿßŸÑÿ© ÿßŸÑÿ®Ÿàÿ™
/help - ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©
  `)
})

bot.command("login", async (ctx) => {
  try {
    if (process.env.ADMIN_USER_ID && ctx.from.id.toString() !== process.env.ADMIN_USER_ID) {
      return ctx.reply("‚ùå ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠ ŸÑŸÉ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Ÿáÿ∞ÿß ÿßŸÑÿ£ŸÖÿ±")
    }

    if (whatsappReady) {
      return ctx.reply("‚úÖ Ÿàÿßÿ™ÿ≥ÿßÿ® ŸÖÿ™ÿµŸÑ ÿ®ÿßŸÑŸÅÿπŸÑ!")
    }

    if (qrCodeData) {
      const buffer = Buffer.from(qrCodeData.split(",")[1], "base64")
      await ctx.replyWithPhoto({ source: buffer }, { caption: "üì± ÿßŸÖÿ≥ÿ≠ Ÿáÿ∞ÿß ÿßŸÑÿ±ŸÖÿ≤ ŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ•ŸÑŸâ Ÿàÿßÿ™ÿ≥ÿßÿ®" })
    } else {
      ctx.reply("‚è≥ ÿ¨ÿßÿ±Ÿä ÿ•ŸÜÿ¥ÿßÿ° ÿ±ŸÖÿ≤ QR...")
    }
  } catch (error) {
    console.error("Error in login command:", error)
    ctx.reply("‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£")
  }
})

bot.command("status", (ctx) => {
  const telegramStatus = "‚úÖ ŸÖÿ™ÿµŸÑ"
  const whatsappStatus = whatsappReady ? "‚úÖ ŸÖÿ™ÿµŸÑ" : "‚ùå ÿ∫Ÿäÿ± ŸÖÿ™ÿµŸÑ"

  ctx.reply(`
üìä ÿ≠ÿßŸÑÿ© ÿßŸÑÿ®Ÿàÿ™:

üîµ ÿ™ŸÑŸäÿ¨ÿ±ÿßŸÖ: ${telegramStatus}
üü¢ Ÿàÿßÿ™ÿ≥ÿßÿ®: ${whatsappStatus}

‚è∞ ÿ¢ÿÆÿ± ÿ™ÿ≠ÿØŸäÿ´: ${new Date().toLocaleString()}
  `)
})

bot.help((ctx) => {
  ctx.reply(`
üìã ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:

/login - ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ•ŸÑŸâ Ÿàÿßÿ™ÿ≥ÿßÿ®
/status - ÿ≠ÿßŸÑÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑÿßÿ™
/help - ÿπÿ±ÿ∂ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©

üí° ŸÑÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑŸÖŸäÿ≤ÿßÿ™ÿå ÿ±ÿßÿ¨ÿπ ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ.
  `)
})

// ÿ®ÿØÿ° ÿßŸÑÿÆÿØŸÖÿßÿ™
async function startBot() {
  try {
    console.log("üöÄ Starting bot...")

    // ÿßÿÆÿ™ÿ®ÿßÿ± ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    try {
      const client = await pool.connect()
      console.log("‚úÖ Database connected")
      client.release()
    } catch (error) {
      console.error("‚ùå Database connection failed:", error)
    }

    // ÿ®ÿØÿ° Ÿàÿßÿ™ÿ≥ÿßÿ®
    console.log("üì± Initializing WhatsApp...")
    await whatsappClient.initialize()

    // ÿ®ÿØÿ° ÿ™ŸÑŸäÿ¨ÿ±ÿßŸÖ
    console.log("üîµ Starting Telegram bot...")
    await bot.launch()

    console.log("‚úÖ Bot started successfully!")

    // ŸÖÿπÿßŸÑÿ¨ ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ
    process.once("SIGINT", () => bot.stop("SIGINT"))
    process.once("SIGTERM", () => bot.stop("SIGTERM"))
  } catch (error) {
    console.error("‚ùå Failed to start bot:", error)
    process.exit(1)
  }
}

startBot()
